<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Drawing_the_Faithful_Transitive_Permutation_Representation_Graph">
<Heading>Drawing the Faithful Transitive Permutation Representation Graph</Heading>

<Section Label="Chapter_Drawing_the_Faithful_Transitive_Permutation_Representation_Graph_Section_Drawing_functions">
<Heading>Drawing functions</Heading>

<P/>
 One of the advantages of Faithful Transitive Permutation Representation Graph are on Groups generated by involutions, such as C-groups.
 These graphs are very useful in the research of abstract polytopes and hypertopes, mainly called as "Schreier coset graphs" or "CPR graphs" in this area. 
 Here we will give a function that builds this graph given a permutation group generated by involutions, a group and one of its core-free subgroups or by giving an isomorphism of the group into the symmetric group acting faithfully and transitively on its domain.
 To use Graphviz in order to create the image file, you need to be running GAP on a Linux Environment (Windows Subsystem for Linux is supported), with graphviz installed.
<P/>
<ManSection Label="AutoDoc_generated_group1">
  <Oper Arg="G" Name="DotFTPRGraph" Label="for IsPermGroup"/>
  <Oper Arg="G[, generators_name]" Name="DotFTPRGraph" Label="for IsPermGroup, IsList"/>
  <Oper Arg="map" Name="DotFTPRGraph" Label="for IsGeneralMapping"/>
  <Oper Arg="map[, generators_name]" Name="DotFTPRGraph" Label="for IsGeneralMapping, IsList"/>
  <Oper Arg="H, K" Name="DotFTPRGraph" Label="for IsGroup,IsGroup"/>
  <Oper Arg="H, K[, generators_name]" Name="DotFTPRGraph" Label="for IsGroup,IsGroup, IsList"/>
 <Returns>a graph written in dot
</Returns>
 <Description>
 Given a transitive permutation group <A>G</A>, a faithful transitive permutation representation of a group <A>map</A> or a group <A>H</A> and one of its core-free subgroups <A>K</A>, the function will output the permutation representation graph written in the language of a Dot file.
 If given a list of the name of the generators <A>generators_name</A>, these will be given to the label of their action on the graph. Otherwise, the labels will be <A>r0, r1,  r2, ...</A> for the generators <A>G.1, G.2, G.3, ...</A>.
<P/>
<Example><![CDATA[
gap> G:= SymmetricGroup(4);;H:= Subgroup(G,[(1,2)]);;K:= Subgroup(G,[(1,2,3)]);;
gap> DotFTPRGraph(G);
"digraph {\n1 -> 2 [label = r1];\n 2 -> 3 [label = r1];\n 3 -> 4 [labe\
l = r1];\n 4 -> 1 [label = r1];\n 1 -> 2 [label = r2,dir=none];\n }\n"
gap> DotFTPRGraph(G,H);
"digraph {\n1 -> 10 [label = r1];\n 2 -> 12 [label = r1];\n 3 -> 11 [l\
abel = r1];\n 4 -> 8 [label = r1];\n 5 -> 9 [label = r1];\n 6 -> 7 [la\
bel = r1];\n 7 -> 3 [label = r1];\n 8 -> 2 [label = r1];\n 9 -> 1 [lab\
el = r1];\n 10 -> 5 [label = r1];\n 11 -> 6 [label = r1];\n 12 -> 4 [l\
abel = r1];\n 2 -> 3 [label = r2,dir=none];\n 4 -> 7 [label = r2,dir=n\
one];\n 5 -> 8 [label = r2,dir=none];\n 6 -> 9 [label = r2,dir=none];\
\n 10 -> 11 [label = r2,dir=none];\n }\n"
gap> Print(DotFTPRGraph(FactorCosetAction(G,K),["A","B"]));
digraph {
1 -> 3 [label = A];
2 -> 4 [label = A];
3 -> 5 [label = A];
4 -> 6 [label = A];
5 -> 8 [label = A];
6 -> 7 [label = A];
7 -> 2 [label = A];
8 -> 1 [label = A];
1 -> 2 [label = B,dir=none];
3 -> 5 [label = B,dir=none];
4 -> 6 [label = B,dir=none];
7 -> 8 [label = B,dir=none];
}
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="arg" Name="DrawFTPRGraph" />
 <Returns>an image of the faithful transitive permutation representation graph
</Returns>
 <Description>
 This global function takes as input the following arguments:
<List>
<Item>
<A>arg</A> := <A>dotstring</A>[, <A>rec</A>]
</Item>
<Item>
<A>arg</A> := <A>G</A>[, <A>rec</A>]
</Item>
<Item>
<A>arg</A> := <A>map</A>[,<A>rec</A>]
</Item>
<Item>
<A>arg</A> := <A>H</A>,<A>K</A>[,<A>rec</A>]
</Item>
</List>
 Given a string of a graph in dot <A>dotstring</A>, this function will output and show an image of the graph.
 Alternatively, a transitive permutation group <A>G</A>, a faithful transitive permutation representation of a group <A>map</A> or a group <A>H</A> and one of its core-free subgroups <A>K</A>, can be given. This will use <A>DotFTPRGraph</A> to calculate the <A>dotstring</A>.
 Moreover, extra parameters can be given as a form of a record <A>rec</A>. The set of parameters that can be given inside a record can be found below, with information regarding their effect:
<List>
<Item>
<A>layout</A> - (a string) the engine that is used to calculate the layout of the vertices and edges of graph to output in the dot image (not used for TeX output). The supported layouts are "dot", "neato", "twopi", "circo", "fdp", "sfdp", "patchwork", "osage". By default "neato" is used.
</Item>
<Item>
<A>directory</A> - (a string) the name of the folder where the dot and image files are created. By default, a temporary folder of GAP is used.
</Item>
<Item>
<A>path</A> - (a string) the path where the directory will be created. If the directory is not specified, a folder "tmp.viz" will be created at the determined path. If no path is given, the default path is "~/". If no path nor directory is given, it will be saved in a temporary path of GAP.
</Item>
<Item>
<A>file</A> - (a string) the name of the dot and image files created. By default, the name will be "vizpicture".
</Item>
<Item>
<A>filetype</A> - (a string) the image file type that will be created. By default, the filetype will be "pdf".
</Item>
<Item>
<A>viewer</A> - (a string) the name of the visualizer used to open the image. The supported ones are "evince","xpdf","xdg-open","okular", "gv", "open" (for the different System Architectures).
</Item>
<Item>
<A>tikz</A> - (a boolean) if true, then the function will produce a TeX file, compile it to pdf and open.
</Item>
<Item>
<A>viewtexfile</A> - (a boolean) if true, then the function will produce a TeX file and return the text of the Tex file (but it will not compile and open any pdf from the TeX file).
</Item>
</List>
<P/>
<Example><![CDATA[
gap> G:= SymmetricGroup(4);;H:= Subgroup(G,[(1,2)]);;K:= Subgroup(G,[(1,2,3)]);;
gap> DrawFTPRGraph(G);
gap> texfile := DrawFTPRGraph(G,H,rec(viewtexfile := true));; 
gap> Print(texfile{[1..152]});
\documentclass{article}
\usepackage[x11names, svgnames, rgb]{xcolor}
\usepackage[utf8]{inputenc}
\usepackage{tikz}
\usetikzlibrary{snakes,arrows,shapes}
gap> DrawFTPRGraph(FactorCosetAction(G,K),rec(directory := "myfolder", layout:="fdp"));;
]]></Example>


 </Description>
</ManSection>


<ManSection>
  <Func Arg="arg" Name="TeXFTPRGraph" />
 <Returns>an image of the faithful transitive permutation representation graph
</Returns>
 <Description>
 The same as <A>DrawFTPRGraph</A> with the parameter <A>viewtexfile := true</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="arg" Name="DrawTeXFTPRGraph" />
 <Returns>an image of the faithful transitive permutation representation graph
</Returns>
 <Description>
 The same as <A>DrawFTPRGraph</A> with the parameter <A>tikz := true</A>.
 </Description>
</ManSection>


<P/>
</Section>


<Section Label="Chapter_Drawing_the_Faithful_Transitive_Permutation_Representation_Graph_Section_Information_Level_of_Drawing_Functions">
<Heading>Information Level of Drawing Functions</Heading>

 We can set the amount of verbosity of the functions "DrawFTPRGraph", "TeXFTPRGraph" and "DrawTeXFTPRGraph", which can be controlled 
 by the <A>InfoDrawFTPR</A> variable.
 As of right now, there are only two levels of the <A>InfoDrawFTPR</A> and, by default, the level is set as 1.
 To change to level 2, you can do the following:
<Log><![CDATA[
gap> SetInfoLevel(InfoDrawFTPR,2);
]]></Log>


 Particularly, <A>InfoDrawFTPR</A> in level 2 will give information regarding the location in which the files are being created and processed.
</Section>


</Chapter>

